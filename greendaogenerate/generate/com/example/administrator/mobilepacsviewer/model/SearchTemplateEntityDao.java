package com.example.administrator.mobilepacsviewer.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.administrator.mobilepacsviewer.model.SearchTemplateEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SEARCH_TEMPLATE_ENTITY".
*/
public class SearchTemplateEntityDao extends AbstractDao<SearchTemplateEntity, Long> {

    public static final String TABLENAME = "SEARCH_TEMPLATE_ENTITY";

    /**
     * Properties of entity SearchTemplateEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SearchName = new Property(1, String.class, "SearchName", false, "SEARCH_NAME");
        public final static Property AccessionNumber = new Property(2, String.class, "AccessionNumber", false, "ACCESSION_NUMBER");
        public final static Property Name = new Property(3, String.class, "Name", false, "NAME");
        public final static Property MedRecNO = new Property(4, String.class, "MedRecNO", false, "MED_REC_NO");
        public final static Property OrganizationID = new Property(5, String.class, "OrganizationID", false, "ORGANIZATION_ID");
        public final static Property RequestDeptName = new Property(6, String.class, "RequestDeptName", false, "REQUEST_DEPT_NAME");
        public final static Property PatientClass = new Property(7, String.class, "PatientClass", false, "PATIENT_CLASS");
        public final static Property ServiceSectID = new Property(8, String.class, "ServiceSectID", false, "SERVICE_SECT_ID");
        public final static Property RequestedDateStart = new Property(9, String.class, "RequestedDateStart", false, "REQUESTED_DATE_START");
        public final static Property RequestedDateEnd = new Property(10, String.class, "RequestedDateEnd", false, "REQUESTED_DATE_END");
    };


    public SearchTemplateEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SearchTemplateEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SEARCH_TEMPLATE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SEARCH_NAME\" TEXT," + // 1: SearchName
                "\"ACCESSION_NUMBER\" TEXT," + // 2: AccessionNumber
                "\"NAME\" TEXT," + // 3: Name
                "\"MED_REC_NO\" TEXT," + // 4: MedRecNO
                "\"ORGANIZATION_ID\" TEXT," + // 5: OrganizationID
                "\"REQUEST_DEPT_NAME\" TEXT," + // 6: RequestDeptName
                "\"PATIENT_CLASS\" TEXT," + // 7: PatientClass
                "\"SERVICE_SECT_ID\" TEXT," + // 8: ServiceSectID
                "\"REQUESTED_DATE_START\" TEXT," + // 9: RequestedDateStart
                "\"REQUESTED_DATE_END\" TEXT);"); // 10: RequestedDateEnd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SEARCH_TEMPLATE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchTemplateEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String SearchName = entity.getSearchName();
        if (SearchName != null) {
            stmt.bindString(2, SearchName);
        }
 
        String AccessionNumber = entity.getAccessionNumber();
        if (AccessionNumber != null) {
            stmt.bindString(3, AccessionNumber);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(4, Name);
        }
 
        String MedRecNO = entity.getMedRecNO();
        if (MedRecNO != null) {
            stmt.bindString(5, MedRecNO);
        }
 
        String OrganizationID = entity.getOrganizationID();
        if (OrganizationID != null) {
            stmt.bindString(6, OrganizationID);
        }
 
        String RequestDeptName = entity.getRequestDeptName();
        if (RequestDeptName != null) {
            stmt.bindString(7, RequestDeptName);
        }
 
        String PatientClass = entity.getPatientClass();
        if (PatientClass != null) {
            stmt.bindString(8, PatientClass);
        }
 
        String ServiceSectID = entity.getServiceSectID();
        if (ServiceSectID != null) {
            stmt.bindString(9, ServiceSectID);
        }
 
        String RequestedDateStart = entity.getRequestedDateStart();
        if (RequestedDateStart != null) {
            stmt.bindString(10, RequestedDateStart);
        }
 
        String RequestedDateEnd = entity.getRequestedDateEnd();
        if (RequestedDateEnd != null) {
            stmt.bindString(11, RequestedDateEnd);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SearchTemplateEntity readEntity(Cursor cursor, int offset) {
        SearchTemplateEntity entity = new SearchTemplateEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // SearchName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // AccessionNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MedRecNO
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // OrganizationID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // RequestDeptName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // PatientClass
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // ServiceSectID
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RequestedDateStart
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // RequestedDateEnd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SearchTemplateEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSearchName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccessionNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMedRecNO(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrganizationID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRequestDeptName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPatientClass(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setServiceSectID(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRequestedDateStart(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRequestedDateEnd(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SearchTemplateEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SearchTemplateEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
